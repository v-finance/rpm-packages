Prerequisites
=============

Packages for building RPMs (rpm-build, rpm-devel, rpmlint and rpmdevtools)
should already be installed on your workstation by ansible.


Building Packages
=================

A list of the available packages can be obtained using:

$ invoke list-packages

When building a package for the first time, it is necessary to install the build
dependencies:

$ invoke install-build-deps <package>

Next, the package can be build:

$ invoke build-package <package>

To build and install all packages, the following command can be used:

$ invoke build-all-packages	# requires sudo

To build all packages without sudo, mock can be used:

$ invoke mock-build-packages


Naming Conventions
==================

- Packages always have a bundle name (e.g. stable) associated with them.
- Package names start with the prefix "vortex-<bundle_name>-" (e.g. vortex-stable-).
  This helps to distinguish them from other packages provided by CentOS and
  vortex packages from other bundles.
- Packages are installed to the "/vortex/<target_triplet>/<bundle_name>" directory.
- See https://wiki.osdev.org/Target_Triplet for more information about the target
  triplet. Currently, the output of "gcc -dumpmachine" is used.


LD_LIBRARY_PATH
===============

Since packages are not installed to default locations, it is necessary to set the
LD_LIBRARY_PATH environment variable to make sure the correct libraries are used.
The dynamic libraries are always located in the
"/vortex/<target_triplet>/<bundle_name>/lib" directory.

Example:

$ export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/vortex/x86_64-redhat-linux/stable/lib"
$ ...


Dependencies Between Packages
=============================

PACKAGE			DEPENDS ON
vortex-openssl		-
vortex-qt5		-
vortex-python3		vortex-openssl
vortex-sip		vortex-openssl, vortex-python3, vortex-qt5
vortex-pyqt5		vortex-openssl, vortex-python3, vortex-qt5, vortex-sip


Setting the Bundle Name
=======================

If no bundle name is specified, a default name is used (currently stable).

To set the bundle name, the VORTEX_BUNDLE environment variable should be set when
building a package.

For example:

$ VORTEX_BUNDLE=feature-freeze invoke build-package vortex-python3


MinGW Packages for Cross-Compilation
====================================

In order to build recent versions of Qt, a recent version of MinGW is required.
The version provided by CentOS 8 is too old. The version provided by Fedora 32
can be used but the packages need to be rebuild for CentOS 8.

Step 1: Download Fedora Source Packages
---------------------------------------

The source packages can be downloaded from:
https://download.fedoraproject.org/pub/fedora/linux/releases/32/Everything/source/tree/Packages/m/

The following fedora packages are needed to bootstrap GCC:

- mingw-filesystem
- mingw-binutils
- mingw-headers
- mingw-gcc
- mingw-crt
- mingw-winpthreads
- cloog

Next, additional packages provide the libraries:

- mingw-win-iconv
- mingw-termcap
- mingw-gettext
- mingw-pkg-config
- mingw-zlib

The commands below assume all the source packages are in the present working
directory.

Step 2: Bootstrap GCC
---------------------

Most packages can be rebuild for CentOS using one command:

$ rpmbuild --rebuild <fedora_source_rpm>

However, due to a cyclic dependency between gcc, headers and winpthreads,
bootstrapping gcc is a bit more complicated. The steps below give an overview of
this process.

- build & install   filesystem
- build & install   binutils
- build & install   headers       with "%global bundle_dummy_pthread_headers 1"
- build & install   cloog         (build dependency of gcc)
- build & install   gcc           with "%global bootstrap 1" and "%global libgomp 0"
- build & install   crt
- build             winpthreads
- uninstall         gcc
- uninstall         headers
- install           winpthreads
- build & install   headers
- build & install   gcc


Step 2.1: mingw-filesystem and mingw-binutils
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$ rpmbuild --rebuild mingw-filesystem-<version>.fc32.src.rpm
$ sudo rpm -i ~/rpmbuild/RPMS/noarch/mingw-filesystem-base-<version>.el8.noarch.rpm
$ sudo rpm -i ~/rpmbuild/RPMS/noarch/mingw32-filesystem-base-<version>.el8.noarch.rpm
$ sudo rpm -i ~/rpmbuild/RPMS/noarch/mingw64-filesystem-base-<version>.el8.noarch.rpm

$ rpmbuild --rebuild mingw-binutils-<version>.fc32.src.rpm
$ sudo rpm -i ~/rpmbuild/RPMS/x86_64/mingw-binutils-generic-<version>.el8.x86_64.rpm
$ sudo rpm -i ~/rpmbuild/RPMS/x86_64/mingw32-binutils-<version>.el8.x86_64.rpm
$ sudo rpm -i ~/rpmbuild/RPMS/x86_64/mingw64-binutils-<version>.el8.x86_64.rpm


Step 2.2: Building mingw-headers for the First Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$ # unpack source rpm
$ mkdir mingw-headers
$ cd mingw-headers
$ rpm2cpio ../mingw-headers-<version>.fc32.src.rpm | cpio -idmv

Edit the mingw-headers.spec file and replace:

	%if 0%{?fedora} >= 20 || 0%{?rhel} >= 7
	%global bundle_dummy_pthread_headers 0
	%else
	%global bundle_dummy_pthread_headers 1
	%endif

with:

	%global bundle_dummy_pthread_headers 1

$ cp *.patch ~/rpmbuild/SOURCES
$ cp *.tar.bz2 ~/rpmbuild/SOURCES
$ rpmbuild -bb mingw-headers.spec
$ sudo rpm -i ~/rpmbuild/RPMS/x86_64/mingw32-headers-<version>.el8.x86_64.rpm
$ sudo rpm -i ~/rpmbuild/RPMS/x86_64/mingw64-headers-<version>.el8.x86_64.rpm

Step 2.3: mingw-gcc Build Dependency cloog
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$ rpmbuild --rebuild cloog-<version>.fc32.src.rpm
$ sudo rpm -i ~/rpmbuild/RPMS/x86_64/cloog-<version>.el8.x86_64.rpm
$ sudo rpm -i ~/rpmbuild/RPMS/x86_64/cloog-devel-<version>.el8.x86_64.rpm

Step 2.4: Building mingw-gcc for the First Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$ # unpack source rpm
$ mkdir mingw-gcc
$ cd mingw-gcc
$ rpm2cpio ../mingw-gcc-<version>.fc32.src.rpm | cpio -idmv

Edit the mingw-gcc.spec file and replace:

	%global bootstrap 0

	%global enable_libgomp 1

with:

	%global bootstrap 1

	%global enable_libgomp 0

$ cp *.tar.xz ~/rpmbuild/SOURCES
$ rpmbuild -bb mingw-gcc.spec
$ # install the generated packages...

Step 2.5: Continue Building Packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Continue building the packages according to the list given above. mingw-gcc and
mingw-headers needs to be uninstalled before mingw-winpthreads can be installed
since the first headers package contained dummy pthread headers. Once this is
done, the final version of mingw-headers and mingw-gcc can be build and
installed (without editing the spec file).


